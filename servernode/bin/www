#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('servernode:server');
var http = require('http');
var mysql = require('mysql');
var config = require('config');
var timers = require('timers');
var nodes = require('../nodes');

nodes.app = app;

var db_config = config.get("db");
var connection = mysql.createConnection({
	host: db_config.host,
	user: db_config.user,
	password: db_config.password,
	database: db_config.database
});

app.set('connection', connection);

connection.connect(function(err) {
	if (!err) {
		console.log("Connected to DB");
	} else {
		console.log("DB connection failed", err);
	}
});

console.log("Reading node list");
connection.query("SELECT * FROM nodeinfo, nodestatus WHERE nodeinfo.id = nodestatus.nodeid", function(err, data) {
	console.log(data);
	data.forEach(function(node_data) {
		var node = new nodes.SensorNode(node_data.id, node_data.nicename, node_data.ip, node_data.port, node_data.laststatus > 0, 0); // TODO: read out last update time
		connection.query("SELECT * FROM sensorinfo WHERE nodeid = ?", [node.id], function(err, data) {
			data.forEach(function(sensor_info) {
				node.sensors[sensor_info.id] = { type: sensor_info.sensortype };
			});
		});
		node.ping(function(status) {
			console.log("Pinged node", status);
		});
		node.push_config({
			"node_id": node.id,
			"sensors": {
				"camera":{
					"delay": 1,
					"resolution": [640, 480]
				},
				"thermometer": {
					"delay": 1
				},
				"push": {
					"delay": 1
				}
			}
		});
		nodes.list.push(node);
	});
});

timers.setInterval(function() {
	console.log("Pinging nodes");
	nodes.list.forEach(function(node) {
		node.ping(function(status) {
			console.log("Pinged node", status);
		});
	});
}, 10000);

var server = http.createServer(app);
server.listen(3000);
server.on('error', onError);
server.on('listening', onListening);

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}
function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
