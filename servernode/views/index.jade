extends layout
block js
  script.
    var tempscale = { 15:{r:70,g:120,b:255}, 20:{r:70,g:210,b:240}, 25:{r:65,g:240,b:120}, 30:{r:240,g:230,b:65}, 35:{r:240,g:120,b:65}, 40:{r:240,g:70,b:70} };
    var interpolate = function(t, k) { 
      var factor = (t%5.0) / 5; var keys = Object.keys(tempscale); 
      var i = 0; while(i+1 < keys.length && keys[++i] <= t) { } 
      return Math.floor(tempscale[keys[i-1]][k] + (tempscale[keys[i]][k] - tempscale[keys[i-1]][k]) * factor); 
    }
    $(document).ready( function(){
      function update() {
        $(".tempReading").each(function(){
          var $self = $(this);
          
          var temp = $self.attr("temp");
          $self.text(Math.floor(parseFloat(temp)*10)/10 + "°C");
          var r = interpolate(temp, "r")
          var g = interpolate(temp, "g")
          var b = interpolate(temp, "b")
          
          $self.css("background", "rgb("+r+","+g+","+b+")")
          
          console.log(Math.floor(parseFloat(temp)*10)/10 + "°C")
        });
      }
      
      var savereq = false;
      window.setInterval(function(){
        if(savereq) savereq.abort();
        savereq = $.ajax({
          url: "/",
          context: document.body,
          method: "POST",
          data: {  }
        }).done(function(data) {
          console.log(data);
          for(var id in data) {
            var node = data[id];
            
            var $temp = $("[node-id="+id+"]");
            //var $temp = $it.find(".tempReading");
            console.log($temp);
            $temp.attr("temp", (node.Readings[0] / 1000.0));
            $temp.parent().find("img").attr("src", node.FileName);
          }          
          update();          
          delete savereq;
        });
      }, 1000);
      
      update();
    }); 
    
block content
  .grid
    each node, id in data
      -var inactive = 50
      .gridItem
        .wrapper
          a.inner(href="/node/"+id, class=node.LastReading > inactive || !node.Readings[0] ? "inactive": "")
            header= node.NiceName
            //each hex, temp in tempscale
              if(temp > node.Readings[0]) 
                -hexCode = hex
                -break
            .imageWrapper
              img(src=node.FileName).innerPicture
            if(node.LastReading > inactive)
              .timeSinceUpdate 
                .innerTimeWrapper
                  span.center Offline
            -var temp = parseFloat(node.Readings[0] / 1000.0 || 0.0)
            .tempReading(node-id=id, temp=temp) 
